{
  "comments": [
    {
      "key": {
        "uuid": "964c974a_14fb52f6",
        "filename": "net/test/sock_diag_test.py",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2018-11-03T09:45:47Z",
      "side": 1,
      "message": "I wonder if (a) this shouldn\u0027t just be IS_LINUX_4_19\n(and IS_LINUX_4_9 above)\n\nand (b) why we need to test for kernel version, shouldn\u0027t older kernels also\npass?\n\nIf they don\u0027t pass out of the box, shouldn\u0027t they pass if we setup the sysctl right?\n\nie. perhaps we should have no condition on running the test and instead\nset sysctl if present? or set sysctl if \u003c 4.19...",
      "revId": "d783b8388e6f77647d3d61210fe3a69ceb71b948",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb1a8e5e_c3bb165f",
        "filename": "net/test/sock_diag_test.py",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1121354
      },
      "writtenOn": "2018-11-05T20:01:12Z",
      "side": 1,
      "message": "Currently we do not set tcp_default_init_rwnd in net test so this test cannot pass on older kernels. I think we can have a kernel version check to make sure 4.19 kernel have enough rwnd by default and for older kernel, we set the tcp_default_init_rwnd then check the rwnd is large enough. But the rcv_ssthresh of new kernel (64k) is different from the old (approximately 42k), I am not sure if we want to test the old one as well if this test is aimed for checking the new rwnd on 4.19 to make partner have the correct patch.",
      "parentUuid": "964c974a_14fb52f6",
      "revId": "d783b8388e6f77647d3d61210fe3a69ceb71b948",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "95066634_494cb14e",
        "filename": "net/test/sock_diag_test.py",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2018-11-03T09:45:47Z",
      "side": 1,
      "message": "or 7?",
      "range": {
        "startLine": 43,
        "startChar": 23,
        "endLine": 43,
        "endChar": 24
      },
      "revId": "d783b8388e6f77647d3d61210fe3a69ceb71b948",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9c28b4e_90912e70",
        "filename": "net/test/sock_diag_test.py",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1121354
      },
      "writtenOn": "2018-11-05T20:01:12Z",
      "side": 1,
      "message": "Actually this need to be 8 since there are paddings involved, but I can make it depend on the format instead of hard code it.",
      "parentUuid": "95066634_494cb14e",
      "range": {
        "startLine": 43,
        "startChar": 23,
        "endLine": 43,
        "endChar": 24
      },
      "revId": "d783b8388e6f77647d3d61210fe3a69ceb71b948",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5cf6c6f_ab9384a7",
        "filename": "net/test/sock_diag_test.py",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2018-11-06T10:55:04Z",
      "side": 1,
      "message": "Can we use an actual cstruct for this? Even if for now it\u0027s all consists of padding except the field we use, that\u0027s better than just an offset search like we have here.",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 31
      },
      "revId": "d783b8388e6f77647d3d61210fe3a69ceb71b948",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "215180e9_0642ed64",
        "filename": "net/test/sock_diag_test.py",
        "patchSetId": 1
      },
      "lineNbr": 560,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2018-11-03T09:45:47Z",
      "side": 1,
      "message": "or 8? or is there another B at the end?\n\nalso this format string should be next to the STRUCT_SIZE def.\nEither move it up or move that down.\nAlso applies to the RCV_SSTHRESH_INDEX",
      "range": {
        "startLine": 560,
        "startChar": 14,
        "endLine": 560,
        "endChar": 15
      },
      "revId": "d783b8388e6f77647d3d61210fe3a69ceb71b948",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b2d31f1_d7310101",
        "filename": "net/test/sock_diag_test.py",
        "patchSetId": 1
      },
      "lineNbr": 560,
      "author": {
        "id": 1121354
      },
      "writtenOn": "2018-11-05T20:01:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "215180e9_0642ed64",
      "range": {
        "startLine": 560,
        "startChar": 14,
        "endLine": 560,
        "endChar": 15
      },
      "revId": "d783b8388e6f77647d3d61210fe3a69ceb71b948",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "040fd544_4570bc91",
        "filename": "net/test/sock_diag_test.py",
        "patchSetId": 1
      },
      "lineNbr": 563,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2018-11-06T10:55:04Z",
      "side": 1,
      "message": "Can we also do a non-blocking connect and observe the syn packet?",
      "range": {
        "startLine": 563,
        "startChar": 6,
        "endLine": 563,
        "endChar": 58
      },
      "revId": "d783b8388e6f77647d3d61210fe3a69ceb71b948",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}