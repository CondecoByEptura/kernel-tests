{
  "comments": [
    {
      "key": {
        "uuid": "7659e1d3_b1b6e5ea",
        "filename": "net/test/xfrm_test.py",
        "patchSetId": 6
      },
      "lineNbr": 481,
      "author": {
        "id": 1121773
      },
      "writtenOn": "2017-06-27T05:29:48Z",
      "side": 1,
      "message": "If I understand correctly VTI packets have an ESP header at layer 4. Why not check for an ESP header instead of the lack of UDP/TCP? If the goal is to allow IPv6 RAs to pass I would prefer an explicit whitelist",
      "revId": "e365a471ce56ea5f2ec31ace197ca81cf9c0ea5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b862dbf6_c4babf0a",
        "filename": "net/test/xfrm_test.py",
        "patchSetId": 6
      },
      "lineNbr": 481,
      "author": {
        "id": 1070023
      },
      "writtenOn": "2017-06-27T06:17:29Z",
      "side": 1,
      "message": "The current version of scapy supports ESP as a layer type, allowing for things like \"packet.getlayer(scapy.ESP)\" and \"esp_layer.spi\". It is even possible to write something like \"inbound_sa.decrypt(packet)\".\n\nThe current version of scapy is not available in the net_test filesystem. I wrote this check to avoid implementing the missing features myself.",
      "parentUuid": "7659e1d3_b1b6e5ea",
      "revId": "e365a471ce56ea5f2ec31ace197ca81cf9c0ea5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41825533_e2c91902",
        "filename": "net/test/xfrm_test.py",
        "patchSetId": 6
      },
      "lineNbr": 481,
      "author": {
        "id": 1121773
      },
      "writtenOn": "2017-06-27T06:56:57Z",
      "side": 1,
      "message": "Ack! sorry for the ancient development environment.",
      "parentUuid": "b862dbf6_c4babf0a",
      "revId": "e365a471ce56ea5f2ec31ace197ca81cf9c0ea5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad38ec67_32f93f7d",
        "filename": "net/test/xfrm_test.py",
        "patchSetId": 6
      },
      "lineNbr": 491,
      "author": {
        "id": 1121773
      },
      "writtenOn": "2017-06-27T05:29:48Z",
      "side": 1,
      "message": "why local/remote_addr but left/right for everything else?\n\nthis leads to slightly awkward code like:\n\"sock_left.connect((remote_addr, right_port))\"\nwhen you probably would prefer:\n\"sock_left.connect((right_addr, right_port))\"",
      "revId": "e365a471ce56ea5f2ec31ace197ca81cf9c0ea5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "80d9d16d_b7507687",
        "filename": "net/test/xfrm_test.py",
        "patchSetId": 6
      },
      "lineNbr": 491,
      "author": {
        "id": 1070023
      },
      "writtenOn": "2017-06-27T06:17:29Z",
      "side": 1,
      "message": "This is the weirdness imposed by TunTwister. Both ends of the socket perceive the same local and remote address. Or, to be more specific, each socket binds to a local address and attempts to reach any non-local address. Packets destined for the non-local address hit the tap interface where they are twisted and returned.\n\nI\u0027m open to any convention which makes this easier to follow, e.g. declaring variables \"right_local\" \"right_remote\" \"left_local\" and \"left_remote\".",
      "parentUuid": "ad38ec67_32f93f7d",
      "revId": "e365a471ce56ea5f2ec31ace197ca81cf9c0ea5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b908493_2e4e465b",
        "filename": "net/test/xfrm_test.py",
        "patchSetId": 6
      },
      "lineNbr": 491,
      "author": {
        "id": 1121773
      },
      "writtenOn": "2017-06-27T06:56:57Z",
      "side": 1,
      "message": "As discussed offline, I hadn\u0027t realized that the \"remote\" is the same for both left and right.\n\nA combination of comments here and in TunTwister would perhaps save future readers some pain.",
      "parentUuid": "80d9d16d_b7507687",
      "revId": "e365a471ce56ea5f2ec31ace197ca81cf9c0ea5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a78daf4d_4f653da3",
        "filename": "net/test/xfrm_test.py",
        "patchSetId": 6
      },
      "lineNbr": 504,
      "author": {
        "id": 1121773
      },
      "writtenOn": "2017-06-27T05:29:48Z",
      "side": 1,
      "message": "consider changing AddMinimalSaInfo() to take a dictionary as an parameter. There are a lot of these to get in the right order. Additionally there\u0027s enough repetition that a local_sa_info and remote_sa_info object could help remove duplication.",
      "revId": "e365a471ce56ea5f2ec31ace197ca81cf9c0ea5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b504075a_40afd300",
        "filename": "net/test/xfrm_test.py",
        "patchSetId": 6
      },
      "lineNbr": 504,
      "author": {
        "id": 1070023
      },
      "writtenOn": "2017-06-27T08:03:47Z",
      "side": 1,
      "message": "I\u0027m hoping to change this as part of the cleanup work nharold is doing. I\u0027m not sure these are sensitive to ordering, but I don\u0027t find these lines to be particularly readable.\n\nThe intention is to update xfrm.py to take a handful of populated cstructs and write helper methods to populate those cstructs.",
      "parentUuid": "a78daf4d_4f653da3",
      "revId": "e365a471ce56ea5f2ec31ace197ca81cf9c0ea5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8e27e80_e13b49fa",
        "filename": "net/test/xfrm_test.py",
        "patchSetId": 6
      },
      "lineNbr": 510,
      "author": {
        "id": 1121773
      },
      "writtenOn": "2017-06-27T05:29:48Z",
      "side": 1,
      "message": "EMAGICCONSTANT, same below for 200,300,400",
      "revId": "e365a471ce56ea5f2ec31ace197ca81cf9c0ea5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "284f1bd9_b18fe151",
        "filename": "net/test/xfrm_test.py",
        "patchSetId": 6
      },
      "lineNbr": 510,
      "author": {
        "id": 1070023
      },
      "writtenOn": "2017-06-27T08:03:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e8e27e80_e13b49fa",
      "revId": "e365a471ce56ea5f2ec31ace197ca81cf9c0ea5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3381152e_3210c134",
        "filename": "net/test/xfrm_test.py",
        "patchSetId": 6
      },
      "lineNbr": 565,
      "author": {
        "id": 1121773
      },
      "writtenOn": "2017-06-27T05:29:48Z",
      "side": 1,
      "message": "EMAGICCONSTANT, same below for 200,300,400",
      "revId": "e365a471ce56ea5f2ec31ace197ca81cf9c0ea5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a885bb96_d619b503",
        "filename": "net/test/xfrm_test.py",
        "patchSetId": 6
      },
      "lineNbr": 565,
      "author": {
        "id": 1070023
      },
      "writtenOn": "2017-06-27T08:03:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3381152e_3210c134",
      "revId": "e365a471ce56ea5f2ec31ace197ca81cf9c0ea5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec8ed18a_feeea80f",
        "filename": "net/test/xfrm_test.py",
        "patchSetId": 6
      },
      "lineNbr": 575,
      "author": {
        "id": 1121773
      },
      "writtenOn": "2017-06-27T05:29:48Z",
      "side": 1,
      "message": "if you rely on random ports, how will you react to a collision? Is a collision possible within the UML sandbox when starting the test externally?",
      "revId": "e365a471ce56ea5f2ec31ace197ca81cf9c0ea5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a245db67_864a1671",
        "filename": "net/test/xfrm_test.py",
        "patchSetId": 6
      },
      "lineNbr": 575,
      "author": {
        "id": 1070023
      },
      "writtenOn": "2017-06-27T06:17:29Z",
      "side": 1,
      "message": "Collision causes the test to fail, and this does happen with nontrivial probability in the UML sandbox. I want to figure out SO_REUSEADDR before merging.",
      "parentUuid": "ec8ed18a_feeea80f",
      "revId": "e365a471ce56ea5f2ec31ace197ca81cf9c0ea5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97ad351f_d7e50945",
        "filename": "net/test/xfrm_test.py",
        "patchSetId": 6
      },
      "lineNbr": 575,
      "author": {
        "id": 1121773
      },
      "writtenOn": "2017-06-27T06:56:57Z",
      "side": 1,
      "message": "+1 for SO_REUSEADDR in this change.",
      "parentUuid": "a245db67_864a1671",
      "revId": "e365a471ce56ea5f2ec31ace197ca81cf9c0ea5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5097d5ee_38480696",
        "filename": "net/test/xfrm_test.py",
        "patchSetId": 6
      },
      "lineNbr": 575,
      "author": {
        "id": 1070023
      },
      "writtenOn": "2017-06-27T08:03:47Z",
      "side": 1,
      "message": "Figured out the correct place to set the sockopt. (\u0026set it on both sockets)",
      "parentUuid": "97ad351f_d7e50945",
      "revId": "e365a471ce56ea5f2ec31ace197ca81cf9c0ea5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "650326d8_faeb9e27",
        "filename": "net/test/xfrm_test.py",
        "patchSetId": 6
      },
      "lineNbr": 584,
      "author": {
        "id": 1121773
      },
      "writtenOn": "2017-06-27T05:29:48Z",
      "side": 1,
      "message": "should this comment start with TODO:?",
      "revId": "e365a471ce56ea5f2ec31ace197ca81cf9c0ea5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61af1abc_86056ac0",
        "filename": "net/test/xfrm_test.py",
        "patchSetId": 6
      },
      "lineNbr": 584,
      "author": {
        "id": 1070023
      },
      "writtenOn": "2017-06-27T08:03:47Z",
      "side": 1,
      "message": "removed, yay!",
      "parentUuid": "650326d8_faeb9e27",
      "revId": "e365a471ce56ea5f2ec31ace197ca81cf9c0ea5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}