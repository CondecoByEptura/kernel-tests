{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "70890a08_44d4803f",
        "filename": "net/test/multinetwork_base.py",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 1101726
      },
      "writtenOn": "2024-02-09T06:24:54Z",
      "side": 1,
      "message": "This doesn\u0027t actually work because the code calls with larger netIds.\n```\nValueError: 64552 is not in list\n```",
      "range": {
        "startLine": 141,
        "startChar": 0,
        "endLine": 141,
        "endChar": 33
      },
      "revId": "ac2f390b3793d48386ae42516e4281ad4df4bd63",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b92dba3_14089465",
        "filename": "net/test/multinetwork_base.py",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2024-02-09T08:14:16Z",
      "side": 1,
      "message": "Urg. Looks like there\u0027s some code in xfrm_tunnel_test.py which does something like:\n\n_TUNNEL_NETID_OFFSET \u003d 0xFC00  # Matches reserved netid range for IpSecService\n_BASE_TUNNEL_NETID \u003d {4: 40, 6: 60}\n\n...\n\n    for i, underlying_netid in enumerate(cls.tuns):\n      for version in 4, 6:\n        netid \u003d _BASE_TUNNEL_NETID[version] + _TUNNEL_NETID_OFFSET + i\n\nwhich I think will result in netids 64552-64555 and 64572-64575.\n\nA simple fix might be to treat these specially. You could do something simple like move the constants from xfrm_tunnel_test to this file, and then something like:\n\nTUNNEL_NETID_OFFSET \u003d 0xFC00  # Matches reserved netid range for IpSecService\nBASE_TUNNEL_NETID \u003d {4: 40, 6: 60}\nTUNNEL_NETID_RANGE_START \u003d TUNNEL_NETID_OFFSET + BASE_TUNNEL_NETID[4]\n\n    def UidRangeForNetid(cls, netid):\n      if netid \u003e\u003d TUNNEL_NETID_OFFSET:\n        return 500 + (netid - TUNNEL_NETID_OFFSET) * 50\n      # ... current code",
      "parentUuid": "70890a08_44d4803f",
      "range": {
        "startLine": 141,
        "startChar": 0,
        "endLine": 141,
        "endChar": 33
      },
      "revId": "ac2f390b3793d48386ae42516e4281ad4df4bd63",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3e1cd1f_204ac1f9",
        "filename": "net/test/multinetwork_base.py",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 1101726
      },
      "writtenOn": "2024-02-09T08:28:03Z",
      "side": 1,
      "message": "I am trying something like this out\n\nI think I saw code somewhere that iterates 10 times?\nhttps://source.corp.google.com/h/googleplex-android/platform/superproject/main/+/main:kernel/tests/net/test/multinetwork_test.py;l\u003d1013-1021;drc\u003d4d68574a3ac486d8f1bec5f0a8b07b3e0e53a1f6\n\nSo it may create 10 netids for each version? \nBut as long as it is sure that it will \u003c 50 or something it will work.",
      "parentUuid": "6b92dba3_14089465",
      "range": {
        "startLine": 141,
        "startChar": 0,
        "endLine": 141,
        "endChar": 33
      },
      "revId": "ac2f390b3793d48386ae42516e4281ad4df4bd63",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06b245ef_b2899524",
        "filename": "net/test/multinetwork_base.py",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2024-02-09T08:42:27Z",
      "side": 1,
      "message": "testLeftoverRoutes just calls CreateTunInterface without doing the routing rule setup. I don\u0027t see any code in CreateTunInterface that actually creates routing rules, so hopefully it won\u0027t call UidRangeForNetId and this will be fine.",
      "parentUuid": "b3e1cd1f_204ac1f9",
      "range": {
        "startLine": 141,
        "startChar": 0,
        "endLine": 141,
        "endChar": 33
      },
      "revId": "ac2f390b3793d48386ae42516e4281ad4df4bd63",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4ab54532_6173b75c",
        "filename": "net/test/multinetwork_base.py",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 1101726
      },
      "writtenOn": "2024-02-09T09:31:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "06b245ef_b2899524",
      "range": {
        "startLine": 141,
        "startChar": 0,
        "endLine": 141,
        "endChar": 33
      },
      "revId": "ac2f390b3793d48386ae42516e4281ad4df4bd63",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d196f3d_20f49762",
        "filename": "net/test/multinetwork_base.py",
        "patchSetId": 3
      },
      "lineNbr": 143,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2024-02-09T08:14:16Z",
      "side": 1,
      "message": "Do you need these \"cls.\" qualifiers here? NETIDS, UID_RANGE_SIZE and UID_RANGE_SIZE are all globals so they should be accessible without cls.",
      "range": {
        "startLine": 143,
        "startChar": 8,
        "endLine": 143,
        "endChar": 11
      },
      "revId": "ac2f390b3793d48386ae42516e4281ad4df4bd63",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "daea4809_f36a1174",
        "filename": "net/test/multinetwork_base.py",
        "patchSetId": 3
      },
      "lineNbr": 143,
      "author": {
        "id": 1101726
      },
      "writtenOn": "2024-02-09T08:28:03Z",
      "side": 1,
      "message": "It doesn\u0027t work. I think they are members of the `MultiNetworkBaseTest` class, the way they are defined.",
      "parentUuid": "5d196f3d_20f49762",
      "range": {
        "startLine": 143,
        "startChar": 8,
        "endLine": 143,
        "endChar": 11
      },
      "revId": "ac2f390b3793d48386ae42516e4281ad4df4bd63",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}