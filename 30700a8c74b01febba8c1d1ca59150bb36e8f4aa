{
  "comments": [
    {
      "key": {
        "uuid": "83c77003_e1d8eba0",
        "filename": "net/test/run_net_test.sh",
        "patchSetId": 8
      },
      "lineNbr": 102,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2018-06-18T14:59:01Z",
      "side": 1,
      "message": "Given that we construct most of $cmdline much later in this script, it seems like it would make things clearer to initialize and construct it all together later on instead of starting to touch it here.\n\nSo here you could just set nowrite\u003d1, and then later on, when constructing cmdline, add \"ro\" if nowrite is set.",
      "range": {
        "startLine": 102,
        "startChar": 4,
        "endLine": 102,
        "endChar": 16
      },
      "revId": "30700a8c74b01febba8c1d1ca59150bb36e8f4aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d06efc1a_c6ae1d31",
        "filename": "net/test/run_net_test.sh",
        "patchSetId": 8
      },
      "lineNbr": 102,
      "author": {
        "id": 1293738
      },
      "writtenOn": "2018-06-18T17:54:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "83c77003_e1d8eba0",
      "range": {
        "startLine": 102,
        "startChar": 4,
        "endLine": 102,
        "endChar": 16
      },
      "revId": "30700a8c74b01febba8c1d1ca59150bb36e8f4aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06231244_3d6f6b89",
        "filename": "net/test/run_net_test.sh",
        "patchSetId": 8
      },
      "lineNbr": 201,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2018-06-18T14:59:01Z",
      "side": 1,
      "message": "Pre-existing, but... do you know if this comment is correct? For example, is it obviously incorrect to expect that exporting ARCH\u003d and SUBARCH\u003d will do anything?",
      "range": {
        "startLine": 200,
        "startChar": 0,
        "endLine": 201,
        "endChar": 49
      },
      "revId": "30700a8c74b01febba8c1d1ca59150bb36e8f4aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac30f571_5b61fda6",
        "filename": "net/test/run_net_test.sh",
        "patchSetId": 8
      },
      "lineNbr": 201,
      "author": {
        "id": 1293738
      },
      "writtenOn": "2018-06-18T17:54:26Z",
      "side": 1,
      "message": "AFAIK the rules for GNU Make are commandline \u003e file \u003e environment. There are ways to override this priority with \u0027override\u0027 but generally that is not done. Setting a variable in Make via the environment is the weakest way to do it.\n\nIOW: It\u0027s possible the environment variable might not be respected, if the makefile explicitly sets the variable itself. However, this this would seem unusual for variables that are meant to be user configurable.\n\nI\u0027m inclined to leave this alone, as we don\u0027t have the full history. We also need to do a similar thing for CC (which is not properly overridable by kbuild, and *must* be specified on the command line).",
      "parentUuid": "06231244_3d6f6b89",
      "range": {
        "startLine": 200,
        "startChar": 0,
        "endLine": 201,
        "endChar": 49
      },
      "revId": "30700a8c74b01febba8c1d1ca59150bb36e8f4aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94f429e7_f45825a0",
        "filename": "net/test/run_net_test.sh",
        "patchSetId": 8
      },
      "lineNbr": 211,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2018-06-18T14:59:01Z",
      "side": 1,
      "message": "Is this an input parameter to the script? If so, can/should we make this a command line option?",
      "range": {
        "startLine": 211,
        "startChar": 7,
        "endLine": 211,
        "endChar": 19
      },
      "revId": "30700a8c74b01febba8c1d1ca59150bb36e8f4aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2efb8bf3_311f3292",
        "filename": "net/test/run_net_test.sh",
        "patchSetId": 8
      },
      "lineNbr": 211,
      "author": {
        "id": 1293738
      },
      "writtenOn": "2018-06-18T17:54:26Z",
      "side": 1,
      "message": "So, this is a complicated one..\n\nDEFCONFIG is coming in from the builder\u0027s wrapper script, it gets defined by envsetup.sh. So we do need it to come in from the environment.\n\nWe could add a command line option as well, but then we should probably do $ARCH as well.\n\nUML didn\u0027t need this because its defconfig is very reasonable and can be extended with the net options. The x86_64_defconfig is comparably ungainly and builds a much larger kernel than we need, and it doesn\u0027t reflect any of our platforms. The use of DEFCONFIG here is really just to inject the x86_64_cuttlefish_defconfig present in the Android kernel trees; this file will never be upstreamed.",
      "parentUuid": "94f429e7_f45825a0",
      "range": {
        "startLine": 211,
        "startChar": 7,
        "endLine": 211,
        "endChar": 19
      },
      "revId": "30700a8c74b01febba8c1d1ca59150bb36e8f4aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb218893_4f81fc40",
        "filename": "net/test/run_net_test.sh",
        "patchSetId": 8
      },
      "lineNbr": 211,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2018-06-21T15:18:54Z",
      "side": 1,
      "message": "Ah, of course.",
      "parentUuid": "2efb8bf3_311f3292",
      "range": {
        "startLine": 211,
        "startChar": 7,
        "endLine": 211,
        "endChar": 19
      },
      "revId": "30700a8c74b01febba8c1d1ca59150bb36e8f4aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f64c57c_a3189d33",
        "filename": "net/test/run_net_test.sh",
        "patchSetId": 8
      },
      "lineNbr": 229,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2018-06-18T14:59:01Z",
      "side": 1,
      "message": "I think \"make olddefconfig\" works since at least 3.10, so we can delete this.",
      "range": {
        "startLine": 220,
        "startChar": 0,
        "endLine": 229,
        "endChar": 3
      },
      "revId": "30700a8c74b01febba8c1d1ca59150bb36e8f4aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0ee4393_e9d879c4",
        "filename": "net/test/run_net_test.sh",
        "patchSetId": 8
      },
      "lineNbr": 229,
      "author": {
        "id": 1293738
      },
      "writtenOn": "2018-06-18T17:54:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9f64c57c_a3189d33",
      "range": {
        "startLine": 220,
        "startChar": 0,
        "endLine": 229,
        "endChar": 3
      },
      "revId": "30700a8c74b01febba8c1d1ca59150bb36e8f4aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "869ea7ef_512dab9a",
        "filename": "net/test/run_net_test.sh",
        "patchSetId": 8
      },
      "lineNbr": 247,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2018-06-18T14:59:01Z",
      "side": 1,
      "message": "Nit: this seems clear enough that it doesn\u0027t need a comment.",
      "range": {
        "startLine": 247,
        "startChar": 0,
        "endLine": 247,
        "endChar": 63
      },
      "revId": "30700a8c74b01febba8c1d1ca59150bb36e8f4aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbb1fe07_ed407724",
        "filename": "net/test/run_net_test.sh",
        "patchSetId": 8
      },
      "lineNbr": 247,
      "author": {
        "id": 1293738
      },
      "writtenOn": "2018-06-18T17:54:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "869ea7ef_512dab9a",
      "range": {
        "startLine": 247,
        "startChar": 0,
        "endLine": 247,
        "endChar": 63
      },
      "revId": "30700a8c74b01febba8c1d1ca59150bb36e8f4aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d204b7b_8246df70",
        "filename": "net/test/run_net_test.sh",
        "patchSetId": 8
      },
      "lineNbr": 274,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2018-06-18T14:59:01Z",
      "side": 1,
      "message": "Any reason not to use a file in the plan9 filesystem? Is it so to avoid writing to the source tree when running the tests? (This script already writes to the source tree to download the filesystem image, but perhaps that\u0027s a different problem.) In any case, might want to mention the reason in this comment.",
      "range": {
        "startLine": 274,
        "startChar": 44,
        "endLine": 274,
        "endChar": 74
      },
      "revId": "30700a8c74b01febba8c1d1ca59150bb36e8f4aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c62952a1_096f0080",
        "filename": "net/test/run_net_test.sh",
        "patchSetId": 8
      },
      "lineNbr": 274,
      "author": {
        "id": 1293738
      },
      "writtenOn": "2018-06-18T17:54:26Z",
      "side": 1,
      "message": "I\u0027ll update the comment. I think a serial port is probably better for a number of reasons.\n\n1) It\u0027s probably better if we can avoid writing to the host filesystem unless absolutely necessary. I had enough pain getting the flags to qemu right to make permissions and groups (sort of) work for manual edits.\n\n2) The serial port file gets initialized (emptied) by qemu when it starts up, which saves some scripting foo.\n\n3) The solution is more extensible to future use cases that might not have 9p or need to mount an external filesystem. The exitcode serial port is nearly functionally equivalent to the UML /proc/exitcode feature.",
      "parentUuid": "8d204b7b_8246df70",
      "range": {
        "startLine": 274,
        "startChar": 44,
        "endLine": 274,
        "endChar": 74
      },
      "revId": "30700a8c74b01febba8c1d1ca59150bb36e8f4aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a365bbb_71c37a46",
        "filename": "net/test/run_net_test.sh",
        "patchSetId": 8
      },
      "lineNbr": 274,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2018-06-21T15:18:54Z",
      "side": 1,
      "message": "Thanks for the clear comment.",
      "parentUuid": "c62952a1_096f0080",
      "range": {
        "startLine": 274,
        "startChar": 44,
        "endLine": 274,
        "endChar": 74
      },
      "revId": "30700a8c74b01febba8c1d1ca59150bb36e8f4aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "abb85ad5_fcb99382",
        "filename": "net/test/run_net_test.sh",
        "patchSetId": 8
      },
      "lineNbr": 280,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2018-06-18T14:59:01Z",
      "side": 1,
      "message": "Does this guarantee that the device will never be modified even if the VM attempts to mount it read-write? This option is used by parallel_tests.sh, which reuses the same fs image across an arbitrary number of parallel VM executions to catch flaky tests.",
      "range": {
        "startLine": 280,
        "startChar": 16,
        "endLine": 280,
        "endChar": 27
      },
      "revId": "30700a8c74b01febba8c1d1ca59150bb36e8f4aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "641ca833_8fd5a559",
        "filename": "net/test/run_net_test.sh",
        "patchSetId": 8
      },
      "lineNbr": 280,
      "author": {
        "id": 1293738
      },
      "writtenOn": "2018-06-18T17:54:26Z",
      "side": 1,
      "message": "Yes, I think you asked this before. This is a flag to QEMU, not the kernel, so it will tell Linux that the device is read-only, and if Linux ignores this, the block will be trapped and an exception raised, even if the file is writable by the host. This 100% guarantees that the block device will receive no writes. That\u0027s actually why I had to add the cmdline \"ro\" flag, because UML defaults to \"ro\", but x86 Linux defaults to \"rw\", so the kernel automounter\u0027s logic conflicted with the block device permissions.",
      "parentUuid": "abb85ad5_fcb99382",
      "range": {
        "startLine": 280,
        "startChar": 16,
        "endLine": 280,
        "endChar": 27
      },
      "revId": "30700a8c74b01febba8c1d1ca59150bb36e8f4aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c46648c_7ba4d9ad",
        "filename": "net/test/run_net_test.sh",
        "patchSetId": 8
      },
      "lineNbr": 289,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2018-06-18T14:59:01Z",
      "side": 1,
      "message": "Nit: seems like we could get some more interesting races if we had more than 2 threads.",
      "range": {
        "startLine": 289,
        "startChar": 43,
        "endLine": 289,
        "endChar": 70
      },
      "revId": "30700a8c74b01febba8c1d1ca59150bb36e8f4aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c967c547_e68ee038",
        "filename": "net/test/run_net_test.sh",
        "patchSetId": 8
      },
      "lineNbr": 289,
      "author": {
        "id": 1293738
      },
      "writtenOn": "2018-06-18T17:54:26Z",
      "side": 1,
      "message": "Counters to this are 1) we don\u0027t know we\u0027ll exploit more than 2 CPUs usefully, 2) cuttlefish uses 2 threads and 3) I\u0027ve been validating with 2 threads for over a month.\n\n(But I\u0027m kind of interested in living dangerously, so I bumped it to 4 in the latest review. :)",
      "parentUuid": "5c46648c_7ba4d9ad",
      "range": {
        "startLine": 289,
        "startChar": 43,
        "endLine": 289,
        "endChar": 70
      },
      "revId": "30700a8c74b01febba8c1d1ca59150bb36e8f4aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68b3f9db_67a85915",
        "filename": "net/test/run_net_test.sh",
        "patchSetId": 8
      },
      "lineNbr": 290,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2018-06-18T14:59:01Z",
      "side": 1,
      "message": "Can you explain how this works with the above net_test_exitcode? Is the first \"isa-serial\" device guaranteed to be ttyS1 and thus match the net_test_exitcode setting above?",
      "range": {
        "startLine": 290,
        "startChar": 4,
        "endLine": 290,
        "endChar": 43
      },
      "revId": "30700a8c74b01febba8c1d1ca59150bb36e8f4aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42a64db0_51a456db",
        "filename": "net/test/run_net_test.sh",
        "patchSetId": 8
      },
      "lineNbr": 290,
      "author": {
        "id": 1293738
      },
      "writtenOn": "2018-06-18T17:54:26Z",
      "side": 1,
      "message": "There are two serial ports:\n\n- ttyS0 is stdio, as you can see below this is hard-coded, so it will always take the first slot.\n- ttyS1 is the exitcode serial port.\n\nThe device name assignment is a general problem with Linux.. As serial ports are primitive devices with no MAC address or other permanent identifier, we just have to deal with this implicit/encoded behavior.",
      "parentUuid": "68b3f9db_67a85915",
      "range": {
        "startLine": 290,
        "startChar": 4,
        "endLine": 290,
        "endChar": 43
      },
      "revId": "30700a8c74b01febba8c1d1ca59150bb36e8f4aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}