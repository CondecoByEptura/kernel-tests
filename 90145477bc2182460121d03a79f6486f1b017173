{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d3931160_ffaaafe7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2021-02-16T00:35:41Z",
      "side": 1,
      "message": "LGTM assuming comments addressed. Also, presubmit failed with:\n\n  File \"./bpf_test.py\", line 37, in \u003cmodule\u003e\n    from bpf import BPF_FUNC_ktime_get_boot_ns\nImportError: cannot import name BPF_FUNC_ktime_get_boot_ns\n\u0027./bpf_test.py\u0027 failed more than once, giving up\n\nso you\u0027ll presumably need to fix that before submitting.",
      "revId": "90145477bc2182460121d03a79f6486f1b017173",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1eeb89c_94ccf284",
        "filename": "net/test/bpf_test.py",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2021-02-16T00:35:41Z",
      "side": 1,
      "message": "Can we go back to \"from bpf import *\" here, with just one \"pylint: disable\u003dwildcard-import\"? If so, let\u0027s do that. If we can\u0027t do that - for example, if doing so would cause each of the lines that use one of these symbols to generate a warning - then listing everything here explicitly LGTM.",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 78,
        "endChar": 25
      },
      "revId": "90145477bc2182460121d03a79f6486f1b017173",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6357f07_89bbfe04",
        "filename": "net/test/bpf_test.py",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2021-02-16T00:58:38Z",
      "side": 1,
      "message": "That makes every future reference a lint error (undefined variable and the like)...",
      "parentUuid": "b1eeb89c_94ccf284",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 78,
        "endChar": 25
      },
      "revId": "90145477bc2182460121d03a79f6486f1b017173",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac245107_3aa65b89",
        "filename": "net/test/bpf_test.py",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2021-02-16T01:33:16Z",
      "side": 1,
      "message": "Not sure I understand. If we do:\n\nfrom bpf import *  # pylint: disable\u003dwildcard-import\n\nyou\u0027re saying that doing something like:\n\n    key \u003d GetFirstKey(map)\n\n- which we do everywhere in the file - will cause an undefined variable lint error? If so, then we probably shouldn\u0027t do it.\n\nBut I\u0027m not sure that\u0027s what you\u0027re saying, because you say \"every future reference\", not \"every reference\"?",
      "parentUuid": "f6357f07_89bbfe04",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 78,
        "endChar": 25
      },
      "revId": "90145477bc2182460121d03a79f6486f1b017173",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "344660d5_12edbabb",
        "filename": "net/test/bpf_test.py",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2021-02-16T04:56:09Z",
      "side": 1,
      "message": "Yes, precisely.\n\nI\u0027m not entirely sure what the difference between \u0027every future reference\u0027 and \u0027every reference\u0027 is.  I assume my point was mentions of a keyword before the import would indeed be correctly marked as undefined, while only mentions after the import would be defined, yet incorrectly flagged by the linter.\n\nEither way, the \u0027disable\u003dwildcard-import\u0027 only fixes the warning that would show up in the \u0027from bpf import *\u0027 line, not every later reference to something from bpf without the bpf. prefix.",
      "parentUuid": "ac245107_3aa65b89",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 78,
        "endChar": 25
      },
      "revId": "90145477bc2182460121d03a79f6486f1b017173",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0dbbc14_66c5f220",
        "filename": "net/test/bpf_test.py",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2021-02-16T00:35:41Z",
      "side": 1,
      "message": "I think you can just make this be \"except socket.error\" and get rid of the pylint comment. Also elsewhere.",
      "range": {
        "startLine": 109,
        "startChar": 4,
        "endLine": 109,
        "endChar": 53
      },
      "revId": "90145477bc2182460121d03a79f6486f1b017173",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b222149e_bdcb4fc8",
        "filename": "net/test/bpf_test.py",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2021-02-16T00:58:38Z",
      "side": 1,
      "message": "I\u0027m not actually sure what exception this can throw...\nbut socket error seems unlikely for bpf operations no?",
      "parentUuid": "a0dbbc14_66c5f220",
      "range": {
        "startLine": 109,
        "startChar": 4,
        "endLine": 109,
        "endChar": 53
      },
      "revId": "90145477bc2182460121d03a79f6486f1b017173",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d60ccaff_8cbce9d8",
        "filename": "net/test/bpf_test.py",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2021-02-16T01:33:16Z",
      "side": 1,
      "message": "No need to guess, just look at the implementation of LookupMap. It bottoms out at BpfSyscall, which calls MaybeRaiseSocketError, which raises socket.error.",
      "parentUuid": "b222149e_bdcb4fc8",
      "range": {
        "startLine": 109,
        "startChar": 4,
        "endLine": 109,
        "endChar": 53
      },
      "revId": "90145477bc2182460121d03a79f6486f1b017173",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a36747a6_3d674e9b",
        "filename": "net/test/bpf_test.py",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2021-02-16T05:01:08Z",
      "side": 1,
      "message": "Oh, sorry I missed this comment.",
      "parentUuid": "d60ccaff_8cbce9d8",
      "range": {
        "startLine": 109,
        "startChar": 4,
        "endLine": 109,
        "endChar": 53
      },
      "revId": "90145477bc2182460121d03a79f6486f1b017173",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e7a2b0a_97e98b26",
        "filename": "net/test/bpf_test.py",
        "patchSetId": 1
      },
      "lineNbr": 211,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2021-02-16T00:35:41Z",
      "side": 1,
      "message": "Per comment on previous incarnation of this CL, you don\u0027t need this...",
      "range": {
        "startLine": 211,
        "startChar": 4,
        "endLine": 211,
        "endChar": 32
      },
      "revId": "90145477bc2182460121d03a79f6486f1b017173",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd9971a4_cad5ae2a",
        "filename": "net/test/bpf_test.py",
        "patchSetId": 1
      },
      "lineNbr": 211,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2021-02-16T00:58:38Z",
      "side": 1,
      "message": "As mentioned in chat... the linter insists.",
      "parentUuid": "0e7a2b0a_97e98b26",
      "range": {
        "startLine": 211,
        "startChar": 4,
        "endLine": 211,
        "endChar": 32
      },
      "revId": "90145477bc2182460121d03a79f6486f1b017173",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17c283fc_6bbe2add",
        "filename": "net/test/bpf_test.py",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2021-02-16T00:35:41Z",
      "side": 1,
      "message": "... or this. Suggest removing, unless the linter insists on it being there.",
      "range": {
        "startLine": 223,
        "startChar": 4,
        "endLine": 223,
        "endChar": 35
      },
      "revId": "90145477bc2182460121d03a79f6486f1b017173",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58e28817_7278edee",
        "filename": "net/test/bpf_test.py",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2021-02-16T00:58:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "17c283fc_6bbe2add",
      "range": {
        "startLine": 223,
        "startChar": 4,
        "endLine": 223,
        "endChar": 35
      },
      "revId": "90145477bc2182460121d03a79f6486f1b017173",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "072aaa34_75982c29",
        "filename": "net/test/bpf_test.py",
        "patchSetId": 1
      },
      "lineNbr": 372,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2021-02-16T00:35:41Z",
      "side": 1,
      "message": "Ditto (and everywhere else, as well).",
      "range": {
        "startLine": 372,
        "startChar": 4,
        "endLine": 372,
        "endChar": 42
      },
      "revId": "90145477bc2182460121d03a79f6486f1b017173",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "876e0231_2694f72e",
        "filename": "net/test/bpf_test.py",
        "patchSetId": 1
      },
      "lineNbr": 372,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2021-02-16T00:58:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "072aaa34_75982c29",
      "range": {
        "startLine": 372,
        "startChar": 4,
        "endLine": 372,
        "endChar": 42
      },
      "revId": "90145477bc2182460121d03a79f6486f1b017173",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}