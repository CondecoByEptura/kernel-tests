{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f788bdfa_2c44dd0b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2024-08-07T21:22:16Z",
      "side": 1,
      "message": "what does \u0027itself\u0027 mean? is the important part here the fact the src mac is our own? or the src ip is our link local ip?\n\nbecause -for example- afaik packets with our own mac will be dropped on wifi...\n\n\nhow do you expect to use this functionality in practice?\nie. why do you care about this test...",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 41
      },
      "revId": "66af9e3dadbefb2e9f29a7c2f02ed68748988b33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b42d262_dced10c6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 2016993
      },
      "writtenOn": "2024-08-08T01:41:40Z",
      "side": 1,
      "message": "This is for Thread Border Router\u0027s use case. We want to ensure that the kernel will add addresses/routes on receiving an RA from itself. The network could be WiFi or Ethernet. Without the route, we cannot forward packets from Thread to WiFi/Ethernet.\n\nThe RA messages are sent by an ICMPv6 socket created like [this](https://cs.android.com/android/platform/superproject/main/+/main:packages/modules/Connectivity/thread/service/java/com/android/server/thread/InfraInterfaceController.java;l\u003d55;drc\u003d0348cbe874814b1c9b3dcf1ed74719076a8508fb). So I think it\u0027s using the src mac of WiFi/Ethernet.\n\n\u003e because -for example- afaik packets with our own mac will be dropped on wifi...\n\nIs it caused by APF, DTIM or something else?",
      "parentUuid": "f788bdfa_2c44dd0b",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 41
      },
      "revId": "66af9e3dadbefb2e9f29a7c2f02ed68748988b33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71584f02_8f9a949b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2024-08-08T01:47:41Z",
      "side": 1,
      "message": "It\u0027s caused by wifi std/implementation basically.\n\nclient-\u003ewifi_AP-\u003eswitch-\u003erouter\n\nIf a client sends a multicast packet to the AP, the AP will of course send it to the switch, but it will also send it back to the client.\n\nThis is because it has to send it to any *other* wifi clients, and that is done by wifi broadcasting the packet back to *all* clients (using a shared crypto key instead of the client specific key used for unicast traffic).\n\nAs a result of this client side drivers will normally drop any incoming packet where the src mac of the frame is their own.\n\nIndeed if they don\u0027t you get bugs reported, because you end up seeing your own multicast traffic (which can for example fail ipv6 dad) ;-)",
      "parentUuid": "3b42d262_dced10c6",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 41
      },
      "revId": "66af9e3dadbefb2e9f29a7c2f02ed68748988b33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43e74688_0bc1be64",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2024-08-08T01:53:00Z",
      "side": 1,
      "message": "Hmm, I\u0027m not at all sure, but I think the current implementation of this test doesn\u0027t test the behaviour that the code you linked uses.\n\nhere we have:\n  def ReceiveEtherPacketOn(self, netid, packet):\n    posix.write(self.tuns[netid].fileno(), bytes(packet))\n    \nso presumably uses tun/tap fd, which is not at all comparable to the raw socket case you linked.",
      "parentUuid": "71584f02_8f9a949b",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 41
      },
      "revId": "66af9e3dadbefb2e9f29a7c2f02ed68748988b33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad465843_daf595b3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 2016993
      },
      "writtenOn": "2024-01-12T08:15:11Z",
      "side": 1,
      "message": "@lorenzo@google.com Could you take another look? Thanks!",
      "revId": "66af9e3dadbefb2e9f29a7c2f02ed68748988b33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52184219_b191c09c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1693933
      },
      "writtenOn": "2024-04-08T07:13:23Z",
      "side": 1,
      "message": "@handaw@google.com plan of moving this CL forward?",
      "revId": "66af9e3dadbefb2e9f29a7c2f02ed68748988b33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}