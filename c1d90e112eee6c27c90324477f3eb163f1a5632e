{
  "comments": [
    {
      "key": {
        "uuid": "a837b20b_43dd38f3",
        "filename": "net/test/bpf.py",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2017-01-23T01:31:43Z",
      "side": 1,
      "message": "This should already be defined in the socket system library, just \"import socket\" and use \"socket.SOL_SOCKET\".",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 36,
        "endChar": 14
      },
      "revId": "c1d90e112eee6c27c90324477f3eb163f1a5632e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a837b20b_23e2b4b6",
        "filename": "net/test/bpf.py",
        "patchSetId": 5
      },
      "lineNbr": 66,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2017-01-23T01:31:43Z",
      "side": 1,
      "message": "constants",
      "range": {
        "startLine": 66,
        "startChar": 18,
        "endLine": 66,
        "endChar": 27
      },
      "revId": "c1d90e112eee6c27c90324477f3eb163f1a5632e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a837b20b_83d740d3",
        "filename": "net/test/bpf.py",
        "patchSetId": 5
      },
      "lineNbr": 120,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2017-01-23T01:31:43Z",
      "side": 1,
      "message": "constants",
      "range": {
        "startLine": 120,
        "startChar": 22,
        "endLine": 120,
        "endChar": 30
      },
      "revId": "c1d90e112eee6c27c90324477f3eb163f1a5632e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a837b20b_63dcbcf5",
        "filename": "net/test/bpf.py",
        "patchSetId": 5
      },
      "lineNbr": 129,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2017-01-23T01:31:43Z",
      "side": 1,
      "message": "Might want to rename this to BpfAttrOps for consistency with the C structure name.",
      "range": {
        "startLine": 129,
        "startChar": 0,
        "endLine": 129,
        "endChar": 16
      },
      "revId": "c1d90e112eee6c27c90324477f3eb163f1a5632e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a837b20b_a3cd243f",
        "filename": "net/test/bpf.py",
        "patchSetId": 5
      },
      "lineNbr": 144,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2017-01-23T01:31:43Z",
      "side": 1,
      "message": "Add a MaybeRaiseSocketError here too?",
      "range": {
        "startLine": 144,
        "startChar": 0,
        "endLine": 144,
        "endChar": 12
      },
      "revId": "c1d90e112eee6c27c90324477f3eb163f1a5632e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a837b20b_c3d028db",
        "filename": "net/test/bpf.py",
        "patchSetId": 5
      },
      "lineNbr": 156,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2017-01-23T01:31:43Z",
      "side": 1,
      "message": "Remove this, it\u0027s unneeded.",
      "range": {
        "startLine": 156,
        "startChar": 0,
        "endLine": 156,
        "endChar": 8
      },
      "revId": "c1d90e112eee6c27c90324477f3eb163f1a5632e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a837b20b_e3c72c1b",
        "filename": "net/test/bpf.py",
        "patchSetId": 5
      },
      "lineNbr": 187,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2017-01-23T01:31:43Z",
      "side": 1,
      "message": "Delete this.",
      "range": {
        "startLine": 187,
        "startChar": 0,
        "endLine": 187,
        "endChar": 8
      },
      "revId": "c1d90e112eee6c27c90324477f3eb163f1a5632e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a837b20b_43025884",
        "filename": "net/test/bpf.py",
        "patchSetId": 5
      },
      "lineNbr": 195,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2017-01-23T01:31:43Z",
      "side": 1,
      "message": "Can you make these constants? Something like:\n\n  LOG_LEVEL \u003d 1\n  LOG_SIZE \u003d 65536\n\nSame for kern_version.",
      "range": {
        "startLine": 195,
        "startChar": 7,
        "endLine": 195,
        "endChar": 15
      },
      "revId": "c1d90e112eee6c27c90324477f3eb163f1a5632e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a837b20b_a31244ce",
        "filename": "net/test/bpf.py",
        "patchSetId": 5
      },
      "lineNbr": 197,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2017-01-23T01:31:43Z",
      "side": 1,
      "message": "Add a MaybeRaiseSocketError here. It\u0027s probably best if all the operations do it.",
      "range": {
        "startLine": 197,
        "startChar": 2,
        "endLine": 197,
        "endChar": 12
      },
      "revId": "c1d90e112eee6c27c90324477f3eb163f1a5632e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a837b20b_03cb3029",
        "filename": "net/test/bpf_test.py",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2017-01-23T01:31:43Z",
      "side": 1,
      "message": "I think you might be able to put this only once at the top of the class instead of having to put it on every test method.",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 33,
        "endChar": 59
      },
      "revId": "c1d90e112eee6c27c90324477f3eb163f1a5632e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a837b20b_23075494",
        "filename": "net/test/bpf_test.py",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2017-01-23T01:31:43Z",
      "side": 1,
      "message": "Add MaybeRaiseSocketError to CreateMap and remove this assert. Also elsewhere.",
      "range": {
        "startLine": 37,
        "startChar": 4,
        "endLine": 37,
        "endChar": 33
      },
      "revId": "c1d90e112eee6c27c90324477f3eb163f1a5632e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a837b20b_63115ccd",
        "filename": "net/test/bpf_test.py",
        "patchSetId": 5
      },
      "lineNbr": 60,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2017-01-23T01:31:43Z",
      "side": 1,
      "message": "Blanket catching all exceptions is dangerous because it will ignore things like you don\u0027t want to ignore like SyntaxError. If you want to maintain the try/except pattern, I would suggest:\n\n  try:\n    result \u003d ...\n  except IOError:\n    break\n  else:\n    key \u003d ...\n    ...\n\nor, if feasible, be more specific and use assertRaisesErrno when you expect an error and not when you don\u0027t, such as:\n\n  if i \u003d\u003d 100:\n    self.assertRaisesErrno(errno.ENOENT, ...)\n  else:\n    result \u003d ...",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 60,
        "endChar": 13
      },
      "revId": "c1d90e112eee6c27c90324477f3eb163f1a5632e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a837b20b_03205017",
        "filename": "net/test/bpf_test.py",
        "patchSetId": 5
      },
      "lineNbr": 75,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2017-01-23T01:31:43Z",
      "side": 1,
      "message": "Explain that this program does nothing so unlike testPacketBlock we expect the packet to be sent and received.",
      "range": {
        "startLine": 75,
        "startChar": 14,
        "endLine": 75,
        "endChar": 25
      },
      "revId": "c1d90e112eee6c27c90324477f3eb163f1a5632e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a837b20b_c315c8ba",
        "filename": "net/test/bpf_test.py",
        "patchSetId": 5
      },
      "lineNbr": 80,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2017-01-23T01:31:43Z",
      "side": 1,
      "message": "10000 seconds is a rather long time. 0.1?",
      "range": {
        "startLine": 80,
        "startChar": 20,
        "endLine": 80,
        "endChar": 25
      },
      "revId": "c1d90e112eee6c27c90324477f3eb163f1a5632e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a837b20b_43eb7882",
        "filename": "net/test/bpf_test.py",
        "patchSetId": 5
      },
      "lineNbr": 103,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2017-01-23T01:31:43Z",
      "side": 1,
      "message": "Is this necessary? The timeout is in seconds and I don\u0027t think you\u0027re waiting 10000 seconds.",
      "range": {
        "startLine": 103,
        "startChar": 4,
        "endLine": 103,
        "endChar": 26
      },
      "revId": "c1d90e112eee6c27c90324477f3eb163f1a5632e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}